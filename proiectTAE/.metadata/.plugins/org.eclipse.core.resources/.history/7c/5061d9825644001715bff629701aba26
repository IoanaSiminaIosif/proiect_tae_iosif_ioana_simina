package com.example.myproject.controller;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.example.myproject.model.Donator;
import com.example.myproject.model.data.DonatorDao;

/**
 * 
 * @author Simina Iosif
 *
 */

@Controller
@RequestMapping("simi")
public class MyController {

	@Autowired
	private DonatorDao donatorDao;
	Donator deEditat;
	
	@RequestMapping(value = "")
	public String index(Model model) {
		model.addAttribute("lista", donatorDao.findAll());
		model.addAttribute("title", "Banca de sange");
		return "mytem/index";
	}

	@RequestMapping(value = "add", method = RequestMethod.GET)
	public String displayAddForm(Model model) {
		model.addAttribute("title", "Adauga un nou candidat");
		model.addAttribute(new Donator());
		return "mytem/add";
	}

	@RequestMapping(value = "add", method = RequestMethod.POST)
	public String processAdd(@Valid @ModelAttribute("donator") Donator donator, Errors errors, Model model) {

		if (errors.hasErrors()) {
			model.addAttribute("", "");
			return "mytem/add";
		}

		if (donator.getVarsta() < 18) {
			model.addAttribute("mesaj", "Din nefericire nu sunteti un candidat viabil. ");
		} else {
			model.addAttribute("mesaj", "Sunteti un candidat viabil. ");
			donatorDao.save(donator);
		}
		return "mytem/add";
	}
	
	

	@RequestMapping(value = "edit", method = RequestMethod.GET)
	public String displayEditForm(Model model) {
		model.addAttribute("chestii", donatorDao.findAll());
		model.addAttribute("title", "Edit");

		return "mytem/edit";
	}

	@RequestMapping(value = "edit", method = RequestMethod.POST)
	public String processEditForm(Model model, @RequestParam int[] chestiiIDs) {
		 deEditat = new Donator();
		for (int i = 0; i < chestiiIDs.length; i++) {
			deEditat = donatorDao.findOne(chestiiIDs[i]);
		}
		model.addAttribute("deEditat", deEditat);
		return "mytem/editDonator";
	}
	
	@RequestMapping(value = "editDonator", method = RequestMethod.GET)
	public String displayEditDonatorForm(Model model) {
		model.addAttribute("title", "Edit");
		model.addAttribute("deEditat", deEditat);

		return "mytem/editDonator";
	}

	@RequestMapping(value = "editDonator", method = RequestMethod.POST)
	public String processEditDonatorForm(@Valid @ModelAttribute("deEditat") Donator donator, Errors errors, Model model, @RequestParam int[] chestiiIDs) {

		if (errors.hasErrors()) {
			model.addAttribute("", "");
			return "mytem/editDonator";
		}

		if (donator.getVarsta() < 18) {
			model.addAttribute("mesaj", "Din nefericire nu sunteti un candidat viabil. ");
		} else {
			model.addAttribute("mesaj", "Sunteti un candidat viabil. ");
			deEditat.setNume(donator.getNume());
			deEditat.setVarsta(donator.getVarsta());
			deEditat.setGrupa(donator.getGrupa());
			deEditat.setSex(donator.getSex());
			deEditat.setAdresa(donator.getAdresa());
			deEditat.setNumarTelefon(donator.getNumarTelefon());
		}
		return "mytem/editDonator";
	}
	
	
	@RequestMapping(value = "remove", method = RequestMethod.GET)
	public String displayRemoveForm(Model model) {
		model.addAttribute("chestii", donatorDao.findAll());
		model.addAttribute("title", "Remove");

		return "mytem/remove";
	}

	@RequestMapping(value = "remove", method = RequestMethod.POST)
	public String processRemoveForm(@RequestParam int[] chestiiIDs) {

		for (int i = 0; i < chestiiIDs.length; i++) {
			donatorDao.delete(chestiiIDs[i]);
		}

		return "redirect:";
	}
}
